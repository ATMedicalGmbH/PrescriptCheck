name: PrescriptCheck – Full DevOps Feature Integration

on:
  workflow_dispatch:

jobs:
  full-feature-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Repository klonen
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}

      - name: Feature-Branch erstellen
        run: git checkout -b feature/full-validation-pipeline

      - name: Ordnerstruktur vorbereiten
        run: |
          mkdir -p backend/routes backend/controllers backend/models frontend/components scripts tests public/logs

      - name: Rezeptmodell erstellen
        run: |
          echo "const mongoose = require('mongoose');\nconst prescriptionSchema = new mongoose.Schema({\n  code: { type: String, required: true, unique: true },\n  birthDate: { type: String, required: true },\n  status: { type: String, enum: ['gültig', 'eingelöst', 'abgelaufen', 'gesperrt'], default: 'gültig' },\n  issuedAt: { type: Date, default: Date.now },\n  validatedAt: Date\n});\nmodule.exports = mongoose.model('Prescription', prescriptionSchema);" > backend/models/Prescription.js

      - name: Backend-Logik & Logging einfügen
        run: |
          echo "const Prescription = require('../models/Prescription');\nconst fs = require('fs');\n\nexports.validatePrescription = async (req, res) => {\n  try {\n    const { code, birthDate } = req.body;\n    if (!code || !birthDate) return res.status(400).json({ error: 'Code und Geburtsdatum erforderlich.' });\n\n    const prescription = await Prescription.findOne({ code });\n    if (!prescription) return res.status(404).json({ status: 'ungültig' });\n    if (prescription.birthDate !== birthDate) return res.status(403).json({ status: 'verweigert' });\n    if (prescription.status === 'eingelöst') return res.status(410).json({ status: 'eingelöst' });\n    if (prescription.status === 'gesperrt') return res.status(423).json({ status: 'gesperrt' });\n    if (new Date(prescription.issuedAt) < new Date(Date.now() - 1000 * 60 * 60 * 24 * 90)) return res.status(410).json({ status: 'abgelaufen' });\n\n    prescription.validatedAt = new Date();\n    await prescription.save();\n\n    fs.appendFileSync('public/logs/validation.log', `${new Date().toISOString()} – ${code}\n`);\n    return res.json({ status: 'gültig' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'Serverfehler bei der Rezeptprüfung.' });\n  }\n};" > backend/controllers/validateController.js

      - name: Validierungsroute einfügen
        run: echo "const express = require('express');\nconst router = express.Router();\nconst { validatePrescription } = require('../controllers/validateController');\nrouter.post('/validate', validatePrescription);\nmodule.exports = router;" > backend/routes/validate.js

      - name: Frontend Formular mit Farbstatus erstellen
        run: |
          echo "<template>\n  <form @submit.prevent=\"validate\">\n    <label>Rezeptcode:<input v-model=\"code\" required /></label><br />\n    <label>Geburtsdatum:<input v-model=\"birthDate\" type=\"date\" required /></label><br />\n    <button type=\"submit\">Prüfen</button>\n    <p v-if=\"result\" :style=\"{ color: result === 'gültig' ? 'green' : 'red' }\">Status: {{ result }}</p>\n  </form>\n</template>\n<script>\nexport default {\n  data() { return { code: '', birthDate: '', result: null }; },\n  methods: {\n    async validate() {\n      const res = await fetch('/api/validate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ code: this.code, birthDate: this.birthDate }) });\n      const data = await res.json();\n      this.result = data.status || data.error;\n    }\n  }\n};\n</script>" > frontend/components/ValidateForm.vue

      - name: Seeding-Skript für ein Beispielrezept erstellen
        run: echo "const mongoose = require('mongoose');\nconst Prescription = require('../backend/models/Prescription');\nmongoose.connect(process.env.MONGODB_URI);\nPrescription.create({ code: 'ABC123', birthDate: '1990-01-01', status: 'gültig' }).then(() => { console.log('Beispielrezept erstellt'); process.exit(); });" > scripts/seed.js

      - name: QR-Code Generator einfügen
        run: |
          npm install qrcode
          echo "const QRCode = require('qrcode');\nQRCode.toFile('public/code.png', 'ABC123', err => { if (err) throw err; console.log('QR-Code erstellt.'); });" > scripts/generateQR.js

      - name: Test mit Jest anlegen
        run: |
          npm install --save-dev jest supertest
          mkdir -p tests
          echo "const request = require('supertest');\nconst app = require('../backend/server');\ntest('Rezept nicht gefunden', async () => {\n  const res = await request(app).post('/api/validate').send({ code: 'XYZ999', birthDate: '1990-01-01' });\n  expect(res.statusCode).toBe(404);\n});" > tests/validate.test.js

      - name: Änderungen committen
        run: |
          git config user.name "PrescriptCheck Bot"
          git config user.email "bot@at-medical.de"
          git add .
          git commit -m "Full Feature: Rezeptvalidierung + Formular + Logging + Seeding + QR-Code + Tests"

      - name: Änderungen pushen
        run: git push origin feature/full-validation-pipeline

      - name: Pull Request erstellen
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          title: "Full Feature: Rezeptvalidierung mit Frontend, Logging, QR & Tests"
          body: "Dieses Feature integriert vollständige Validierungslogik, QR-Code-Erzeugung, Logging, Test- und Seeddaten."
          branch: feature/full-validation-pipeline
          base: main
